{"version":3,"file":"UpdatesProvider.js","sourceRoot":"","sources":["../src/UpdatesProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEnE,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAErC,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAAE,gCAAgC,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AASjG,OAAO,EAAE,4BAA4B,EAAE,KAAK,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAQpG,kCAAkC;AAClC,MAAM,cAAc,GAAsC,aAAa,CAAC;IACtE,WAAW,EAAE;QACX,gBAAgB;KACjB;IACD,cAAc,EAAE,CAAC,CAAC,EAAE,EAAE,GAAE,CAAC;CAC1B,CAAC,CAAC;AAEH,8CAA8C;AAE9C;;;;;GAKG;AACH,MAAM,2BAA2B,GAE7B,CAAC,QAAQ,EAAE,EAAE;IACf,MAAM,MAAM,GAA2B,EAAE,CAAC;IAC1C,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE;QACpD,IAAI,GAAG,KAAK,KAAK,EAAE;YACjB,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;SACvD;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAA6B,KAAK,IAAI,EAAE;IAChE,MAAM,OAAO,CAAC,gBAAgB,EAAE,CAAC;IACjC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC;IAClB,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;AAC9B,CAAC,CAAC;AAEF,MAAM,cAAc,GAAuB,CAAC,eAAe,EAAE,EAAE;IAC7D,eAAe;QACb,eAAe,CAAC;YACd,IAAI,EAAE,gCAAgC,CAAC,cAAc;SACtD,CAAC,CAAC;IACL,OAAO,CAAC,gBAAgB,EAAE;SACvB,IAAI,CAAC,GAAG,EAAE;QACT,eAAe;YACb,eAAe,CAAC;gBACd,IAAI,EAAE,gCAAgC,CAAC,iBAAiB;aACzD,CAAC,CAAC;IACP,CAAC,CAAC;SACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,eAAe;YACb,eAAe,CAAC;gBACd,IAAI,EAAE,gCAAgC,CAAC,cAAc;gBACrD,KAAK;aACN,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,SAAS,GAAkB,GAAG,EAAE;IACpC,OAAO,CAAC,WAAW,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,qCAAqC;AAErC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,eAAe,GAAG,CAAC,KAAwB,EAAE,EAAE;IACnD,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAC;QAC7C,gBAAgB;KACjB,CAAC,CAAC;IACH,4DAA4D;IAC5D,qEAAqE;IACrE,UAAU;IACV,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE;QACxB,cAAc,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IACH,OAAO,CACL,oBAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,WAAW,EAAE,cAAc,EAAE,IAC5D,KAAK,CAAC,QAAQ,CACS,CAC3B,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,MAAM,UAAU,GAAG,GAOjB,EAAE;IACF,kDAAkD;IAClD,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;IAEnE,wDAAwD;IACxD,OAAO;QACL,WAAW;QACX,cAAc,EAAE,GAAG,EAAE;YACnB,4BAA4B,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;QACrF,CAAC;QACD,oBAAoB;QACpB,cAAc;QACd,SAAS;QACT,cAAc,EAAE,CAAC,SAAiB,OAAO,EAAE,EAAE;YAC3C,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAClD,cAAc,CAAC;gBACb,GAAG,WAAW;gBACd,UAAU,EAAE,MAAM;aACnB,CAAC,CACH,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAeF,mBAAmB;AACnB,OAAO,EAAE,gCAAgC,EAAE,MAAM,6BAA6B,CAAC;AAE/E,iBAAiB;AACjB,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,2BAA2B,EAAE,CAAC","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport type { Manifest } from './Updates.types';\nimport { useUpdateEvents } from './UpdatesHooks';\nimport { UpdatesProviderDownloadEventType, currentlyRunning } from './UpdatesProvider.constants';\nimport type {\n  UpdatesInfo,\n  CheckForUpdateType,\n  DownloadUpdateType,\n  DownloadAndRunUpdateType,\n  RunUpdateType,\n  ReadLogEntriesType,\n} from './UpdatesProvider.types';\nimport { checkAndReturnNewUpdatesInfo, delay, updatesInfoFromEvent } from './UpdatesProvider.utils';\n\n// Context that includes getter and setter for the updates info\ntype UpdatesContextType = {\n  updatesInfo: UpdatesInfo;\n  setUpdatesInfo: (updates: UpdatesInfo) => void;\n};\n\n// The context provided to the app\nconst UpdatesContext: React.Context<UpdatesContextType> = createContext({\n  updatesInfo: {\n    currentlyRunning,\n  },\n  setUpdatesInfo: (_) => {},\n});\n\n///////////// Exported functions /////////////\n\n/**\n * Extracts any custom properties in the `extra` part of the Expo config.  The `eas` property\n * is excluded (reserved for Expo internal use).\n * @param manifest The manifest to check\n * @returns Object containing any properties found. If no extra properties found, returns an empty object.\n */\nconst extraPropertiesFromManifest: (manifest: Partial<Manifest>) => {\n  [key: string]: any;\n} = (manifest) => {\n  const result: { [key: string]: any } = {};\n  for (const key in manifest?.extra?.expoClient?.extra) {\n    if (key !== 'eas') {\n      result[key] = manifest?.extra?.expoClient?.extra[key];\n    }\n  }\n  return result;\n};\n\nconst downloadAndRunUpdate: DownloadAndRunUpdateType = async () => {\n  await Updates.fetchUpdateAsync();\n  await delay(2000);\n  await Updates.reloadAsync();\n};\n\nconst downloadUpdate: DownloadUpdateType = (downloadHandler) => {\n  downloadHandler &&\n    downloadHandler({\n      type: UpdatesProviderDownloadEventType.DOWNLOAD_START,\n    });\n  Updates.fetchUpdateAsync()\n    .then(() => {\n      downloadHandler &&\n        downloadHandler({\n          type: UpdatesProviderDownloadEventType.DOWNLOAD_COMPLETE,\n        });\n    })\n    .catch((error: Error) => {\n      downloadHandler &&\n        downloadHandler({\n          type: UpdatesProviderDownloadEventType.DOWNLOAD_ERROR,\n          error,\n        });\n    });\n};\n\nconst runUpdate: RunUpdateType = () => {\n  Updates.reloadAsync();\n};\n\n/////// Provider and hook ///////////\n\n/**\n * Provides the Updates React context. Includes an [`UpdateEvent`](#updateevent) listener\n * that will set the context automatically, if automatic updates are enabled and a new\n * update is available. This is required if application code uses the [`useUpdates`](#useupdates) hook.\n * @param props Context will be provided to `props.children`\n * @returns the provider.\n * @example\n * ```jsx App.tsx\n * import * as Updates from 'expo-updates';\n *\n * const { UpdatesProvider } = Updates.Provider;\n *\n * import UpdatesDemo from './src/UpdatesDemo';\n *\n * export default function App() {\n *   return (\n *     <UpdatesProvider>\n *       <UpdatesDemo />\n *     </UpdatesProvider>\n *   );\n * }\n * ```\n */\nconst UpdatesProvider = (props: { children: any }) => {\n  const [updatesInfo, setUpdatesInfo] = useState({\n    currentlyRunning,\n  });\n  // Set up listener for events from automatic update requests\n  // that happen on startup, and use events to refresh the updates info\n  // context\n  useUpdateEvents((event) => {\n    setUpdatesInfo(updatesInfoFromEvent(event));\n  });\n  return (\n    <UpdatesContext.Provider value={{ updatesInfo, setUpdatesInfo }}>\n      {props.children}\n    </UpdatesContext.Provider>\n  );\n};\n\n/**\n * Hook that obtains the Updates info structure and functions.\n * Requires that application code be inside an [`UpdatesProvider`](#updatesproviderprops).\n * @returns the [`UpdatesInfo`](#updatesinfo) structure and associated methods. When using the provider,\n * the methods returned by this hook should be used instead of [`checkForUpdateAsync`](#updatescheckforupdateasync),\n * [`fetchUpdateAsync`](#updatesfetchupdateasync), [`readLogEntriesAsync`](#updatesreadlogentriesasync),\n * and [`reloadAsync`](#updatesreloadasync).\n * @example\n * ```jsx UpdatesDemo.tsx\n * import { StatusBar } from 'expo-status-bar';\n * import React from 'react';\n * import { Pressable, Text, View } from 'react-native';\n * import * as Updates from 'expo-updates';\n *\n * const { useUpdates } = Updates.Provider;\n *\n * export default function UpdatesDemo() {\n *   const { updatesInfo, checkForUpdate, downloadAndRunUpdate } = useUpdates();\n *\n *   const { currentlyRunning, updateAvailable } = updatesInfo;\n *\n *   // If true, we show the button to download and run the update\n *   const showDownloadButton = updateAvailable !== undefined;\n *\n *   // Show whether or not we are running embedded code or an update\n *   const runTypeMessage = updatesInfo.currentlyRunning.isEmbeddedLaunch\n *     ? 'This app is running from built-in code'\n *     : 'This app is running an update';\n *\n *   return (\n *     <View style={styles.container}>\n *       <Text style={styles.headerText}>Updates Demo</Text>\n *       <Text>{runTypeMessage}</Text>\n *       <Button pressHandler={checkForUpdate} text=\"Check manually for updates\" />\n *       {showDownloadButton ? (\n *         <Button pressHandler={downloadAndRunUpdate} text=\"Download and run update\" />\n *       ) : null}\n *       <StatusBar style=\"auto\" />\n *     </View>\n *   );\n * }\n */\nconst useUpdates = (): {\n  updatesInfo: UpdatesInfo;\n  checkForUpdate: CheckForUpdateType;\n  downloadAndRunUpdate: DownloadAndRunUpdateType;\n  downloadUpdate: DownloadUpdateType;\n  runUpdate: RunUpdateType;\n  readLogEntries: ReadLogEntriesType;\n} => {\n  // Get updates info value and setter from provider\n  const { updatesInfo, setUpdatesInfo } = useContext(UpdatesContext);\n\n  // Return the updates info and the user facing functions\n  return {\n    updatesInfo,\n    checkForUpdate: () => {\n      checkAndReturnNewUpdatesInfo(updatesInfo).then((result) => setUpdatesInfo(result));\n    },\n    downloadAndRunUpdate,\n    downloadUpdate,\n    runUpdate,\n    readLogEntries: (maxAge: number = 3600000) => {\n      Updates.readLogEntriesAsync(maxAge).then((result) =>\n        setUpdatesInfo({\n          ...updatesInfo,\n          logEntries: result,\n        })\n      );\n    },\n  };\n};\n\n// Export types\nexport type {\n  UpdatesInfo,\n  CurrentlyRunningInfo,\n  AvailableUpdateInfo,\n  UpdatesProviderDownloadEvent,\n  CheckForUpdateType,\n  DownloadUpdateType,\n  DownloadAndRunUpdateType,\n  RunUpdateType,\n  ReadLogEntriesType,\n} from './UpdatesProvider.types';\n\n// Export constants\nexport { UpdatesProviderDownloadEventType } from './UpdatesProvider.constants';\n\n// Export methods\nexport { UpdatesProvider, useUpdates, extraPropertiesFromManifest };\n"]}